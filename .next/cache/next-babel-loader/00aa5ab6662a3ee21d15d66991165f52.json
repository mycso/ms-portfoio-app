{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Users/Michael/Documents/reactJS/stax-of-stories-2/stax2/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Michael\\\\Documents\\\\reactJS\\\\stax-of-stories-2\\\\stax2\\\\frontend\\\\components\\\\Reviews.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query ALL_PRODUCT_REVIEWS_QUERY($skip: Int = 0, $first: Int) {\\n        Product(where: { id: $id }, first: $first, skip: $skip){\\n            id\\n            review (first: $first, skip: $skip, sortBy: stars_DESC) {\\n                id\\n                reviewTitle\\n                comment\\n                stars\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from '@apollo/client';\nimport { useUser } from './User';\nimport ReviewStyles from './styles/ReviewStyles';\nimport Review from './Review';\nimport gql from \"graphql-tag\";\nimport { perPage } from '../config';\nexport var ALL_PRODUCT_REVIEWS_QUERY = gql(_templateObject());\nexport default function Reviews(_ref) {\n  _s();\n\n  var _this = this;\n\n  var product = _ref.product,\n      review = _ref.review,\n      page = _ref.page;\n  console.log(product.review);\n\n  var _useQuery = useQuery(product.review, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  console.log(data, error, loading);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(ReviewStyles, {\n    children: review.map(function (review) {\n      return /*#__PURE__*/_jsxDEV(Review, {\n        review: review,\n        page: page\n      }, review.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Reviews, \"eE+cqeCo2lkI//dPlCsO1rICVGU=\", false, function () {\n  return [useQuery];\n});\n\n_c = Reviews;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reviews\");","map":{"version":3,"sources":["C:/Users/Michael/Documents/reactJS/stax-of-stories-2/stax2/frontend/components/Reviews.js"],"names":["useQuery","useUser","ReviewStyles","Review","gql","perPage","ALL_PRODUCT_REVIEWS_QUERY","Reviews","product","review","page","console","log","variables","skip","first","data","error","loading","message","map","id"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAO,IAAMC,yBAAyB,GAAGF,GAAH,mBAA/B;AAcP,eAAe,SAASG,OAAT,OAA4C;AAAA;;AAAA;;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,MAAhBC,MAAgB,QAAhBA,MAAgB;AAAA,MAARC,IAAQ,QAARA,IAAQ;AAEvDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAO,CAACC,MAApB;;AAFuD,kBAItBT,QAAQ,CAACQ,OAAO,CAACC,MAAT,EAAiB;AACtDI,IAAAA,SAAS,EAAE;AACPC,MAAAA,IAAI,EAAEJ,IAAI,GAAGL,OAAP,GAAiBA,OADhB;AAEPU,MAAAA,KAAK,EAAEV;AAFA;AAD2C,GAAjB,CAJc;AAAA,MAI/CW,IAJ+C,aAI/CA,IAJ+C;AAAA,MAIzCC,KAJyC,aAIzCA,KAJyC;AAAA,MAIlCC,OAJkC,aAIlCA,OAJkC;;AAWvDP,EAAAA,OAAO,CAACC,GAAR,CAAaI,IAAb,EAAmBC,KAAnB,EAA0BC,OAA1B;AACA,MAAIA,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACE,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACI,QAAC,YAAD;AAAA,cACKV,MAAM,CAACW,GAAP,CAAW,UAACX,MAAD;AAAA,0BACR,QAAC,MAAD;AAAwB,QAAA,MAAM,EAAEA,MAAhC;AAAwC,QAAA,IAAI,EAAEC;AAA9C,SAAaD,MAAM,CAACY,EAApB;AAAA;AAAA;AAAA;AAAA,eADQ;AAAA,KAAX;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAtBuBd,O;UAIaP,Q;;;KAJbO,O","sourcesContent":["import { useQuery } from '@apollo/client';\r\nimport { useUser } from './User';\r\nimport ReviewStyles from './styles/ReviewStyles';\r\nimport Review from './Review';\r\nimport gql from \"graphql-tag\";\r\nimport { perPage } from '../config';\r\n\r\nexport const ALL_PRODUCT_REVIEWS_QUERY = gql`\r\n    query ALL_PRODUCT_REVIEWS_QUERY($skip: Int = 0, $first: Int) {\r\n        Product(where: { id: $id }, first: $first, skip: $skip){\r\n            id\r\n            review (first: $first, skip: $skip, sortBy: stars_DESC) {\r\n                id\r\n                reviewTitle\r\n                comment\r\n                stars\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function Reviews({ product, review, page }) {\r\n\r\n    console.log(product.review)\r\n\r\n    const { data, error, loading } = useQuery(product.review, {\r\n        variables: {\r\n            skip: page * perPage - perPage,\r\n            first: perPage,\r\n        },\r\n    });\r\n\r\n    console.log( data, error, loading )\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error: {error.message}</p>;\r\n\r\n    return (\r\n        <ReviewStyles>\r\n            {review.map((review) => (\r\n                <Review key={review.id} review={review} page={page} />\r\n            ))}\r\n        </ReviewStyles>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}