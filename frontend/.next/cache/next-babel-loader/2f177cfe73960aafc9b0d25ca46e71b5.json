{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Michael\\\\Documents\\\\reactJS\\\\stax-of-stories-2\\\\stax2\\\\frontend\\\\components\\\\Reviews.js\";\nimport { useQuery } from '@apollo/client';\nimport { useUser } from './User';\nimport ReviewStyles from './styles/ReviewStyles';\nimport Review from './Review';\nimport gql from \"graphql-tag\";\nimport { perPage } from '../config';\nexport const ALL_PRODUCT_REVIEWS_QUERY = gql`\n    query ALL_PRODUCT_REVIEWS_QUERY($skip: Int = 0, $first: Int) {\n        Product(where: { id: $id }, first: $first, skip: $skip){\n            id\n            review (first: $first, skip: $skip, sortBy: stars_DESC) {\n                id\n                reviewTitle\n                comment\n                stars\n            }\n        }\n    }\n`;\nexport default function Reviews({\n  product,\n  review,\n  page\n}) {\n  console.log(product.review);\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(product.review, {\n    variables: {\n      skip: page * perPage - perPage,\n      first: perPage\n    }\n  });\n  console.log(data, error, loading);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(ReviewStyles, {\n    children: product.review.map(review => /*#__PURE__*/_jsxDEV(Review, {\n      review: review,\n      page: page\n    }, review.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Michael/Documents/reactJS/stax-of-stories-2/stax2/frontend/components/Reviews.js"],"names":["useQuery","useUser","ReviewStyles","Review","gql","perPage","ALL_PRODUCT_REVIEWS_QUERY","Reviews","product","review","page","console","log","data","error","loading","variables","skip","first","message","map","id"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAO,MAAMC,yBAAyB,GAAGF,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZO;AAcP,eAAe,SAASG,OAAT,CAAiB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,MAAX;AAAmBC,EAAAA;AAAnB,CAAjB,EAA4C;AAEvDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAO,CAACC,MAApB;AAEA,QAAM;AAAEI,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2Bf,QAAQ,CAACQ,OAAO,CAACC,MAAT,EAAiB;AACtDO,IAAAA,SAAS,EAAE;AACPC,MAAAA,IAAI,EAAEP,IAAI,GAAGL,OAAP,GAAiBA,OADhB;AAEPa,MAAAA,KAAK,EAAEb;AAFA;AAD2C,GAAjB,CAAzC;AAOAM,EAAAA,OAAO,CAACC,GAAR,CAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,OAA1B;AACA,MAAIA,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACK,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACI,QAAC,YAAD;AAAA,cACKX,OAAO,CAACC,MAAR,CAAeW,GAAf,CAAoBX,MAAD,iBAChB,QAAC,MAAD;AAAwB,MAAA,MAAM,EAAEA,MAAhC;AAAwC,MAAA,IAAI,EAAEC;AAA9C,OAAaD,MAAM,CAACY,EAApB;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH","sourcesContent":["import { useQuery } from '@apollo/client';\r\nimport { useUser } from './User';\r\nimport ReviewStyles from './styles/ReviewStyles';\r\nimport Review from './Review';\r\nimport gql from \"graphql-tag\";\r\nimport { perPage } from '../config';\r\n\r\nexport const ALL_PRODUCT_REVIEWS_QUERY = gql`\r\n    query ALL_PRODUCT_REVIEWS_QUERY($skip: Int = 0, $first: Int) {\r\n        Product(where: { id: $id }, first: $first, skip: $skip){\r\n            id\r\n            review (first: $first, skip: $skip, sortBy: stars_DESC) {\r\n                id\r\n                reviewTitle\r\n                comment\r\n                stars\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function Reviews({ product, review, page }) {\r\n\r\n    console.log(product.review)\r\n\r\n    const { data, error, loading } = useQuery(product.review, {\r\n        variables: {\r\n            skip: page * perPage - perPage,\r\n            first: perPage,\r\n        },\r\n    });\r\n\r\n    console.log( data, error, loading )\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error: {error.message}</p>;\r\n\r\n    return (\r\n        <ReviewStyles>\r\n            {product.review.map((review) => (\r\n                <Review key={review.id} review={review} page={page} />\r\n            ))}\r\n        </ReviewStyles>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}