{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Michael\\\\Documents\\\\reactJS\\\\stax-of-stories-2\\\\stax2\\\\frontend\\\\components\\\\Checkout.js\";\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport nProgress from 'nprogress';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/client';\nconst CheckoutFormStyles = styled.form.withConfig({\n  displayName: \"Checkout__CheckoutFormStyles\",\n  componentId: \"yxfk2z-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.04);border:1px solid rgba(0,0,0,0.06);border-radius:5px;padding:1rem;display:grid;grid-gap:1rem;\"]);\nconst CREATE_ORDER_MUTATION = gql`\n    mutation CREATE_ORDER_MUTATION ($token: String!) {\n        checkout(token: $token) {\n            id\n            charge\n            total\n            items {\n                id\n                name\n            }\n        }\n    }\n`;\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const stripe = useStripe();\n  const router = useRouter();\n  const [checkout, {\n    error: graphQLError\n  }] = useMutation(CREATE_ORDER_MUTATION);\n\n  async function handleSubmit(e) {\n    //1. Stop the form from submitting and turn the loader one\n    e.preventDefault();\n    setLoading(true);\n    console.log('We gotta do some work...'); //2. Start the page transition\n\n    nProgress.start(); //3. Create the payment method via stripe\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    console.log(paymentMethod); //4. Handle any errors from stripe (Token comes back here if successful)\n\n    if (error) {\n      setError(error);\n      nProgress.done();\n      return; //stops the checkout from happening\n    } //5. Send the token from step 3 to our keystone server, via a custom mutation!\n\n\n    const order = await checkout({\n      variables: {\n        token: paymentMethod.id\n      }\n    });\n    console.log(`Finished with the order!!`);\n    console.log(order); //6. Change the page to vie the order\n\n    router.push({\n      pathname: '/order',\n      query: {\n        id: order.data.checkout.id\n      }\n    }); //7. Close the cart \n\n    closeCart(); //8. Turn the loader off\n\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return /*#__PURE__*/_jsxDEV(CheckoutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }, this), graphQLError && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: graphQLError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"buyIt\",\n      className: \"btn btn-success checkout\",\n      type: \"submit\",\n      children: [\"Buy Now \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faChevronRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 91\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n\nfunction Checkout() {\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n}\n\nexport { Checkout };","map":{"version":3,"sources":["C:/Users/Michael/Documents/reactJS/stax-of-stories-2/stax2/frontend/components/Checkout.js"],"names":["useState","styled","CardElement","Elements","useElements","useStripe","loadStripe","FontAwesomeIcon","faChevronRight","nProgress","gql","useMutation","CheckoutFormStyles","form","CREATE_ORDER_MUTATION","stripeLib","process","env","NEXT_PUBLIC_STRIPE_KEY","CheckoutForm","error","setError","loading","setLoading","stripe","router","useRouter","checkout","graphQLError","handleSubmit","e","preventDefault","console","log","start","paymentMethod","createPaymentMethod","type","card","elements","getElement","done","order","variables","token","id","push","pathname","query","data","closeCart","fontSize","message","Checkout"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n    CardElement,\r\n    Elements,\r\n    useElements,\r\n    useStripe,\r\n  } from '@stripe/react-stripe-js';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    faChevronRight,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport nProgress from 'nprogress';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nconst CheckoutFormStyles = styled.form`\r\n    box-shadow: 0 1px 2px 2px rgba(0, 0, 0, 0.04);\r\n    border: 1px solid rgba(0, 0, 0, 0.06);\r\n    border-radius: 5px;\r\n    padding: 1rem;\r\n    display: grid;\r\n    grid-gap: 1rem;\r\n`;\r\n\r\nconst CREATE_ORDER_MUTATION = gql`\r\n    mutation CREATE_ORDER_MUTATION ($token: String!) {\r\n        checkout(token: $token) {\r\n            id\r\n            charge\r\n            total\r\n            items {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\r\n\r\nfunction CheckoutForm() {\r\n    const [error, setError] = useState();\r\n    const [loading, setLoading] = useState(false);\r\n    const stripe = useStripe();\r\n    const router = useRouter();\r\n    const [checkout, {error: graphQLError}] = useMutation(\r\n        CREATE_ORDER_MUTATION\r\n    );\r\n    async function handleSubmit(e) {\r\n        //1. Stop the form from submitting and turn the loader one\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        console.log('We gotta do some work...');\r\n        //2. Start the page transition\r\n        nProgress.start();\r\n        //3. Create the payment method via stripe\r\n        const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n            type: 'card',\r\n            card: elements.getElement(CardElement),\r\n        });\r\n        console.log(paymentMethod)\r\n        //4. Handle any errors from stripe (Token comes back here if successful)\r\n        if (error) {\r\n            setError(error);\r\n            nProgress.done();\r\n            return; //stops the checkout from happening\r\n        }\r\n        //5. Send the token from step 3 to our keystone server, via a custom mutation!\r\n        const order = await checkout({\r\n            variables: {\r\n                token: paymentMethod.id\r\n            },\r\n        });\r\n        console.log(`Finished with the order!!`);\r\n        console.log(order);\r\n        //6. Change the page to vie the order\r\n        router.push({\r\n            pathname: '/order',\r\n            query: { id: order.data.checkout.id }\r\n        });\r\n        //7. Close the cart \r\n        closeCart()\r\n        //8. Turn the loader off\r\n        setLoading(false);\r\n        nProgress.done();\r\n    }\r\n\r\n    return (\r\n        <CheckoutFormStyles onSubmit={handleSubmit}>\r\n            {error && <p style={{ fontSize: 12 }}>{error.message}</p>}\r\n            {graphQLError && <p style={{ fontSize: 12 }}>{graphQLError.message}</p>}\r\n            <CardElement />\r\n            <button id=\"buyIt\" className=\"btn btn-success checkout\" type=\"submit\">Buy Now <FontAwesomeIcon icon={faChevronRight} /></button>\r\n        </CheckoutFormStyles>\r\n    );\r\n}\r\n\r\nfunction Checkout() {\r\n    return (\r\n        <Elements stripe={stripeLib}>\r\n            <CheckoutForm />\r\n        </Elements>\r\n    )\r\n}\r\n\r\nexport {Checkout};"]},"metadata":{},"sourceType":"module"}